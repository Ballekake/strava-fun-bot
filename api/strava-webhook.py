from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, PlainTextResponse
import httpx, os, json, random, logging, time
from datetime import datetime, timedelta

app = FastAPI()
logging.basicConfig(level=logging.INFO)

# -----------------------------
# Config / Environment
# -----------------------------
VERIFY_TOKEN = "mystravaisgarbage"
STRAVA_CLIENT_ID = os.environ.get("STRAVA_CLIENT_ID")
STRAVA_CLIENT_SECRET = os.environ.get("STRAVA_CLIENT_SECRET")
STRAVA_REFRESH_TOKEN = os.environ.get("STRAVA_REFRESH_TOKEN")
STRAVA_ACCESS_TOKEN = os.environ.get("STRAVA_ACCESS_TOKEN")

# -----------------------------
# Token auto-refresh
# -----------------------------
def get_valid_token():
    global STRAVA_ACCESS_TOKEN
    now = time.time()
    expires_at = getattr(get_valid_token, "expires_at", 0)

    if not STRAVA_ACCESS_TOKEN or now > (expires_at - 300):
        if not all([STRAVA_CLIENT_ID, STRAVA_CLIENT_SECRET, STRAVA_REFRESH_TOKEN]):
            logging.error("‚ùå Missing STRAVA_CLIENT_ID/SECRET/REFRESH_TOKEN in env; cannot refresh token.")
            return STRAVA_ACCESS_TOKEN

        logging.info("üîÅ Refreshing Strava access token‚Ä¶")
        try:
            resp = httpx.post(
                "https://www.strava.com/oauth/token",
                data={
                    "client_id": STRAVA_CLIENT_ID,
                    "client_secret": STRAVA_CLIENT_SECRET,
                    "grant_type": "refresh_token",
                    "refresh_token": STRAVA_REFRESH_TOKEN,
                },
                timeout=12,
            )
            resp.raise_for_status()
            data = resp.json()
            STRAVA_ACCESS_TOKEN = data["access_token"]
            get_valid_token.expires_at = data["expires_at"]
            logging.info(f"‚úÖ New Strava token valid until {time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(data['expires_at']))} UTC")
        except Exception as e:
            logging.error(f"üí• Failed to refresh Strava token: {e}")
    return STRAVA_ACCESS_TOKEN


# -----------------------------
# New Title & Description Banks
# -----------------------------
TITLE_BANK = [
    "Jeg trodde pushups var noe man kj√∏per p√• Rema.",
    "Det er ikke kroppen min som sliter, det er sjela.",
    "Jeg har aldri v√¶rt s√• sliten uten √• ha hatt det g√∏y.",
    "Jeg har mer respekt for uniformer n√•.",
    "Jeg visste ikke man kunne svette der.",
    "Jeg pr√∏vde √• gjemme meg bak en busk.",
    "Reveleir sitter i ryggraden.",
    "Jeg har aldri savnet s√∏vn s√• mye.",
    "Det verste er ikke √• l√∏pe ‚Äì det er √• rope.",
    "Dette er karakterbygging med bl√•merker.",
    "Jeg meldte meg p√• for utsikten, ikke for √• d√∏.",
    "Jeg m√• puste med beina n√•.",
    "Det ser flatt ut p√• kartet, men kartet lyver!",
    "Jeg skj√∏nner hvorfor fjellfolk er stille ‚Äì de sparer oksygen.",
    "Dette er ikke tur ‚Äì dette er terapi med bakker.",
    "Jeg har f√•tt gnags√•r p√• sjelen.",
    "Jeg har ikke kondis, jeg har karisma.",
    "Jeg vurderte √• gi opp, men s√• kom kameraet.",
    "Jeg trodde Nordkapp l√• i Sverige.",
    "Det er vinden som trener oss.",
    "Tarzan uten muskler.",
    "Er dette all inclusive, eller koster vannet ekstra?",
    "Jeg kom for √• slappe av, men ble solbrent, blakk og forelska.",
    "Alt g√•r bra med sol og saus.",
    "Jeg blir brun inni.",
    "Jeg f√∏lte det p√• hele stemningen.",
    "Det var et slags ubehag der.",
    "Dette er et kunstprosjekt.",
    "Ingen forst√•r meg, og det er meninga.",
    "Det er et konsept mer enn en id√©.",
    "La det marinere litt.",
    "Det er en slags kommentar til samtida.",
    "Jeg liker at det er litt ubehagelig.",
    "Dette er vondt, men riktig.",
    "Vi skal videre i prosessen.",
    "Nei, nei, nei!",
    "N√¶mmen, hallo i luken!",
    "Jaja, neida, s√•...",
    "Karl, n√• m√• du roe neppa!",
    "Det der g√•r ikke, Nils.",
    "Nils, du er ikke helt god!",
    "Jeg har ikke tid til dette tullet!",
    "Det er ikke lett √• v√¶re Karl.",
    "Noen m√• g√•.",
    "Jeg vil ha ro og orden!",
    "Du, jeg er s√• lei av dette her n√•.",
    "Jeg er ikke sint, jeg er skuffa.",
    "Nils, sett ned den √∏len!"
]

DESC_BANK = [
    "Livet er et l√¶re, man m√• alltid l√¶re.",
    "Jeg b√¶rer ikke noe gnag.",
    "Every strong man is a strong woman.",
    "Det er noe skurr i mosen.",
    "Det har luktet p√∏lse i fem dager n√•.",
    "Forel√∏pig er jeg Bosman-spiller.",
    "Jeg ville aldri svikta deg i ryggen.",
    "Einstein fant opp graviditeten.",
    "Det er lite sj√∏mat i sushi.",
    "Jeg skal spille litt dum ‚Äì det kommer naturlig.",
    "Jeg er 99 % vann og 1 % problemer.",
    "Jeg vil ikke ha drama, men jeg er drama.",
    "Han er som en kebab ‚Äì fristende, men jeg angrer i morgen.",
    "Jeg er ikke sjalu, jeg bare hater √• se deg puste med noen andre.",
    "Vi har et spirituelt b√•nd ‚Äì derfor stalker jeg ham.",
    "En ku er bare en stor gresshund.",
    "Dette blir det m√∏te p√• i tinget.",
    "Jeg pr√∏ver √• finne roen, men den gjemmer seg i fj√∏set.",
    "Melka smaker innsats.",
    "Han oppf√∏rer seg som om han har arvet g√•rden.",
    "Det er ikke lett √• v√¶re ydmyk n√•r man melker best.",
    "Dugnaden er obligatorisk.",
    "Dette er 1800-tallet med kamerateam.",
    "Jeg er her for √• overleve uten str√∏m.",
    "Det er mye drit i gj√∏dsla, for √• si det s√•nn.",
    "Vi kan snakke om det ‚Äì passiv-aggressivt.",
    "Du, det er ikke en konkurranse‚Ä¶ men jeg vinner.",
    "Vi resirkulerer f√∏lelser og glass.",
    "Hage er politikk.",
    "Vi tar det p√• facebook-gruppa.",
    "Det er ikke lov med trampoliner i hjertet.",
    "Jeg blir glad p√• en ryddig m√•te.",
    "Vi later som vi koser oss.",
    "Oppgaven er enkel, men umulig.",
    "Du m√• ikke si et ord ‚Äì men forklare alt.",
    "Reglene er klare, men uklare.",
    "Dette ser jo lett ut‚Ä¶ helt til det er din tur.",
    "Tiden starter n√•.",
    "Det var kreativt ‚Äì og fullstendig feil.",
    "Jeg elsker kaoset ditt.",
    "Dommeren er n√•del√∏s.",
    "Det var pent, men ikke poenggivende.",
    "Du l√∏ste oppgaven. P√• en m√•te.",
    "Det er en skandale uten sidestykke!",
    "Vi skal til fakta, men f√∏rst: litt f√∏lelser.",
    "Jeg er ikke sint, jeg bare roper.",
    "Dette er humor med bismak.",
    "N√• ble det d√•rlig stemning.",
    "Vi tar en kort pause fra virkeligheten.",
    "Jeg bor her, jeg!",
    "Det blir ikke noe kos i kveld.",
    "Det er min sofa!",
    "Nils! D√∏ra!",
    "Dette er ikke et kollektiv!",
    "Jeg hater folk uten n√∏kkel!",
    "Hvem er det som ringer n√• igjen?",
    "Ta av deg skoene!",
    "Det er forbudt √• ha det g√∏y her!",
    "Det var ikke det jeg sa!",
    "Ikke r√∏r mine ting!",
    "Det er min postkasse!",
    "Hvorfor skjer dette alltid meg?"
]

def pick_quote():
    t = random.choice(TITLE_BANK)
    d = random.choice(DESC_BANK)
    logging.info(f"üß™ Selected title: {t}")
    logging.info(f"üß™ Selected desc: {d[:100]}‚Ä¶")
    return {"title": t, "description": d}


# -----------------------------
# Duplicate guard
# -----------------------------
recent_updates = {}
def already_processed(activity_id):
    now = datetime.utcnow()
    last = recent_updates.get(activity_id)
    if last and (now - last) < timedelta(minutes=5):
        return True
    recent_updates[activity_id] = now
    return False


# -----------------------------
# Webhook verify
# -----------------------------
@app.get("/api/strava-webhook")
async def verify_webhook(request: Request):
    mode = request.query_params.get("hub.mode")
    token = request.query_params.get("hub.verify_token")
    challenge = request.query_params.get("hub.challenge")
    if mode == "subscribe" and token == VERIFY_TOKEN:
        logging.info("‚úÖ Webhook verified")
        return JSONResponse({"hub.challenge": challenge})
    return JSONResponse({"error": "invalid verify token"}, status_code=400)


# -----------------------------
# Webhook handler
# -----------------------------
@app.post("/api/strava-webhook")
async def handle_webhook(request: Request):
    try:
        payload = await request.json()
    except Exception:
        return JSONResponse({"error": "Invalid JSON"}, status_code=400)

    logging.info(f"üì¨ Received Strava webhook: {json.dumps(payload)}")

    if payload.get("object_type") != "activity":
        return PlainTextResponse("ignored", status_code=200)

    aspect = payload.get("aspect_type")
    activity_id = payload.get("object_id")

    if already_processed(activity_id):
        logging.info(f"‚è≥ Duplicate activity {activity_id}, skipping.")
        return PlainTextResponse("duplicate", status_code=200)

    if aspect not in ("create", "update"):
        return PlainTextResponse("ignored", status_code=200)

    async with httpx.AsyncClient(timeout=15) as client:
        headers = {"Authorization": f"Bearer {get_valid_token()}"}
        r = await client.get(f"https://www.strava.com/api/v3/activities/{activity_id}", headers=headers)
        logging.info(f"‚û°Ô∏è GET-status: {r.status_code}")
        if r.status_code != 200:
            logging.error(f"‚ùå Unable to fetch activity: {r.text}")
            return PlainTextResponse("GET failed", status_code=r.status_code)

        td = pick_quote()
        update_data = {
            "name": td["title"],
            "description": td["description"],
        }

        logging.info(f"üìù PUT payload: {json.dumps(update_data, ensure_ascii=False)[:240]}")

        put = await client.put(
            f"https://www.strava.com/api/v3/activities/{activity_id}",
            headers=headers,
            data=update_data,
        )
        logging.info(f"‚úÖ Updated activity {activity_id}: {put.status_code} ‚Äî {put.text[:200]}")

    return PlainTextResponse("OK", status_code=200)
